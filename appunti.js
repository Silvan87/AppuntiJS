var categorie, appunti;
function caricaDaAppuntiJS() {
categorie = {"*":"*","html":"HTML","css":"CSS","bootstrap":"Bootstrap","js":"JavaScript","javascript":"JavaScript","jq":"JQuery","$":"JQuery","jquery":"JQuery","ng":"Angular","angular":"Angular","php":"PHP","sql":"SQL","oop":"OOP","java":"Java","javafx":"JavaFX","cs":"C#","c#":"C#","git":"Git","gnulinux":"GNU-Linux","gnu-linux":"GNU-Linux","linux":"GNU-Linux","netbeans":"NetBeans","maven":"Maven","mvn":"Maven","tdd":"TDD","cc":"CleanCode","cleancode":"CleanCode"}
appunti = {"JavaScript":[[["console","messaggio","debug"],"<mark>console.log(stringa1, stringa2, stringaN);</mark>"],[["alert","avviso","messaggio"],"<mark>window.alert(stringa);</mark>"]],"PHP":[[["echo","stampa","stringa"],"Stampa una stringa nella pagina in uscita:<br><br><mark>echo('stringa');</mark>"],[["autoload","class","spl","register"],"<mark>spl_autoload_register()</mark> permette di caricare automaticamente tutte le classi che vengono usate con la sintassi \"new Class()\". Così, non serve specificare ogni volta \"require a; require b; ...\", basta specificare una sola volta \"require '__autoload.php';\" (questo file speciale solitamente viene scritto con due underscore __ all'inizio).<br><br>N.B. Convenzione da rispettare: ciascuna classe deve stare in un singolo file ed il file deve avere lo stesso nome della classe.<br><br><h3>File: __autoload.php</h3><mark>&lt;?php<br>spl_autoload_register(function($nome_classe) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// Convenzione: un file per ogni classe, e file con stesso nome della classe<br>&nbsp;&nbsp;&nbsp;&nbsp;$path = $_SERVER['DOCUMENT_ROOT'] . '/class/' . $nome_classe . '.php';<br>&nbsp;&nbsp;&nbsp;&nbsp;require $path;<br>});</mark><br><br><h3>File: esempio.php</h3><mark>&lt;?php<br>require '__autoload.php';<br><br>$esempio = new Esempio();<br>$istanza = new ClasseAutomaticamenteInclusa();<br>$unAltro = new NonServeIncludermi();</mark>"],[["filter","input","get","post"],"I parametri tramite GET o POST conviene prenderli con filter, perché la funzione esegue alcuni controlli di sicurezza in più rispetto al recuperare i dati grezzi.<br><br><mark>$nomePagina = filter_input(INPUT_GET, 'nomePagina');<br>$idUtente = filter_input(INPUT_POST, 'idUtente');</mark><br>"],[["costanti"],"Le costanti è bene scriverle tutte in maiuscolo.<br><br><mark>define('PI_GRECO', 3.14);<br><br>Esempio d'uso:<br>$circonferenza = $raggio * 2 * PI_GRECO;</mark><br>"],[["array","semplice","associativo"],"<mark>$frutta = array('mela', 'pera', 'banana');</mark><br><br>$frutta[0]<br>$frutta[1]<br>$frutta[2]<br><br><mark>$coloriFrutta = array(<br>&nbsp;&nbsp;&nbsp;&nbsp;'mela' =&gt; 'rossa',<br>&nbsp;&nbsp;&nbsp;&nbsp;'pera' =&gt; 'verde',<br>&nbsp;&nbsp;&nbsp;&nbsp;'banana' =&gt; 'gialla'<br>);</mark><br><br>$coloriFrutta['mela']"],[["metodi","connessione","database","pdo"],"- <strike>mysql_connect</strike> (deprecato)<br>- <mark>mysql</mark> (più vecchio)<br>- <mark>mysqli</mark><br>- <mark>PDO</mark> (PHP Database Object) (più recente)<br><br><h2>PDO</h2>È una classe fornita da PHP, va instanziata:<br><br><mark>$pdo&nbsp;=&nbsp;new&nbsp;PDO('mysql:host=localhost;dbname=nome_database',&nbsp;'root',&nbsp;'password',&nbsp;[]);</mark><br><br><br>"]],"Git":[[["utilizzo","uso","scopo"],"Git è un CVS (Sistema di Controllo di Versione) che è utile localmente ed in remoto:<br><br>- In locale: permette di avere copie di backup, mentre il lavoro avanza con nuove funzionalità. Quindi offre possibilità di recuperare versioni precedenti ed avere uno storico con tutte le modifiche commentate.<br><br>- In remoto: più sviluppatori possono collaborare e sincronizzare i loro lavori con il deposito in remoto, fondamentalmente ciò avviene tramite una logica a rami, ogni serie di modifiche viene realizzata su un ramo e questo può essere innestato sul progetto principale insieme ad altri rami. Possono coesistere anche dei rami principali dedicati alla versione stabile, di testing e di sviluppo.<br>"],[["installazione","download"],"Git è multipiattaforma e può essere scaricato dal sito ufficiale:<br><a href=\"https://git-scm.com/download\" target=\"_blank\">https://git-scm.com/download</a><br><br>In linux è disponibile nel software center.<br>"],[["configurazione"],"Ci sono 3 livelli di configurazione: tutti gli utenti (--system), singolo utente (--global), singolo progetto (cartella .git del progetto). Il livello più specifico sovrascrive quello più generale.<br><br>L'identità definita da nome ed email va inserita come prima cosa a livello utente:<br><br><mark>git config --global user.name \"MioNome\"<br>git config --global user.email \"mia@email.it\"</mark><br><br>Per controllare le configurazioni:<br><br><mark>git config --list</mark><br><br>È possibile attivare una cache di breve durata (pochi minuti) per le credenziali, così che in una serie di invii successivi non devono essere specificate ogni volta:<br><br><mark>git config --global credential.helper cache</mark><br><br>Di default Git usa l'editor Vim, probabilmente è preferibile usare nano:<br><br><mark>git config --global core.editor \"nano\"</mark><br><br>È comodo usare delle abbreviazioni per alcuni comandi molto usati, al posto di 'commit', potremo scrivere 'cm'; al posto di 'branch', 'br'; 'checkout', 'co' e 'status', 'st':<br><br><mark>git config --global alias.co checkout<br>git config --global alias.br branch<br>git config --global alias.cm commit<br>git config --global alias.st status</mark>"],[["avviare","progetto","nuovo","init"],"Creare una cartella con il nome del progetto, collocarsi al suo interno e partire con:<br><br><mark>git init</mark><br><br>Se la cartella contiene già dei file sarà possibile inserirli come prima modifica. Per inviare il progetto e le successive modifiche ad un deposito remoto, occorre specificare l'URL del deposito:<br><br><mark>git remote add origin https://github.com/Autore/NomeDeposito</mark><br><br>- origin è il nome del deposito, può essere modificato, così da averne più di uno.<br><br>Se serve forzare un primo commit su un deposito quasi vuoto che ospiterà il progetto, possiamo cancellare tutti i commit in remoto, sovrascrivendo con il progetto locale così:<br><br><mark>git push origin master --force</mark><br>(non è un metodo elegante, bisognerebbe approfondire le tecniche di rebase)<br>"],[["clonare","progetto"],"Recuperare l'URL del progetto da clonare (copiare in locale) e usare:<br><br><mark>git clone https://github.com/Autore/Progetto</mark><br><br>Verrà creata una cartella con il nome del progetto, per personalizzare il nome della cartella:<br><br><mark>git clone https://github.com/Autore/Progetto NomeCartella</mark>"],[["rimuovere","file","modifica","staging"],"<h2>Escludere un file dalla fase di modifica</h2><br>Se il file è segnato come modificato dobbiamo escluderlo dall'albero inserendo il suo nome in \".git/info/exclude\", ma questo avrà effetto solo per le prossime volte. Per la situazione corrente usare:<br><br><mark>git rm --cached nome_file</mark><br><br><h2>Escludere un file dalla fase di staging</h2><br>Se il file è già stato allestito per un commit e vogliamo continuare a monitorarlo, ma escluderlo dal commit preparato (e non ancora eseguito), usare:<br><br><mark>git reset HEAD nome_file</mark>"],[["sovrascrivere","ultimo","commit","amend"],"Per correggere l'ultimo commit, bisogna apportare le modifiche, mettere i file modificati in staging ed eseguire il comando:<br><br><mark>git commit --amend -m \"Titolo breve\" -m \"Descrizione completa\"</mark><br><br>Conviene specificare i messaggi, che andranno a sovrascrivere quelli precedenti, altrimenti verrà aperto un editor di testo per modificarli o confermarli.<br><br><b>N.B.</b><br>Il commit corretto (se quello sbagliato era stato già caricato in remoto) viene considerato nuovo e diverso, quindi sarà in conflitto con il deposito remoto. Se si è gli unici sviluppatori si può azzardare questa operazione:<br><br><mark>git push origin master --force</mark><br><br>Altrimenti occorre approfondire le possibilità offerte da:<br><br><mark>git rebase --continue<br></mark>"]],"*":[],"Java":[[["web","enterprise","edition","ee","introduzione"],"<h1>Java e Web</h1><br>JavaEE (Enterprise Edition) è un contenitore di librerie Java:<br><br>- JDBC (Java DataBase Connectivity)<br>- JSP (Java Server Pages) tradotti in istanze tramite classe Servlet<br>- EJB (Enterprise JavaBean)<br>- JSF (Java Server Faces)<br><br>= Servlet =<br>Classe java che gestisce un sistema client-server di richieste e risposte.<br>Funziona all'interno di un contenitore java che fa da Server Application / Web Server (alcuni esempi: Tomcat, JBoss, Glassfish, ecc.). Questi fanno funzionare le servlet.<br><br>I Server Java si dividono in due gruppi:<br><br>-- Application Server<br>Un'applicazione Web è un insieme di servlet, filter e listener.<br>container java per tutto il container EE compresi gli EJB<br>(es. JBoss)<br><br>-- Web Server<br>container java per servlet e JSP e JSF<br>(es. Tomcat)<br>"],[["preparare","apache","tomcat"],"In Eclipse occorre dedicare un Workspace per JavaEE ed avere la giusta perspective. Serve aver scaricato il file zip <a href=\"https://tomcat.apache.org/download-90.cgi\" target=\"_blank\">Apache Tomcat</a> che contiene il server.<br><br>- C'è una scheda dei server (in basso)<br>- Tasto destro &gt; Proprietà - Scegliere \"Switch Location\" per non legare il server ad Eclipse<br>- Sul server con doppio click si apre la finestra Overview, qui impostiamo la porta 8081 (per evitare eventuali conflitti col database Oracle o altro) e la deploy path dovrebbe essere: /opt/apache-tomcat/webapps<br>- Definire gli utenti, la configurazione essenziale in <mark>tomcatusers.xml</mark> è:<br><br><mark>&lt;role rolename=\"tomcat\"/&gt;<br>&lt;role rolename=\"admin\"/&gt;<br>&lt;role rolename=\"admin-gui\"/&gt;<br>&lt;role rolename=\"manager-gui\"/&gt;<br>&lt;user username=\"tomcat\" password=\"password\" roles=\"tomcat,admin,admin-gui,manager-gui\"/&gt;</mark><br><br>ovvero 4 ruoli essenziali tutti attribuiti ad un super utente tomcat.<br><br>- Avviando il server si potrà visitare: <a href=\"http://localhost:8081\" target=\"_blank\">http://localhost:8081</a><br>- Il passo successivo è solitamente creare un nuovo Dynamic Web Project<br>"],[["servlet","definizione"],"La Servlet è una classe Java che gestisce il traffico http. Questa viene istanziata con la prima chiamata di un utente qualsiasi. Per ogni chiamata di un utente viene aperto un thread parallelo (multi-threading).<br><br>È possibile istanziare una servlet all'avvio dell'applicazione Web, specificando l'ordine di istanziazione (0, 1, 2...) o fargli aspettare il momento della prima chiamata (con -1).<br>"],[["jsp","jstl","el","definizione"],"<h2>JSP (Java Server Page)</h2><br>File contenenti codice html e codice java (scriptlet, simile ai file php)<br><br>Le JSP sono tradotte in Servlet da un motore jsp presente nell'Application / Web Server<br>(in Tomcat questo motore si chiama Jasper, le servlet compilate vengono eseguite da Catalina)<br><br>JSP hanno 3 componenti:<br><br><h3>Direttive</h3>Istruzioni generali alla servlet:<br>&lt;%@ page: informazioni per la generazione della pagina<br>&lt;%@ include: include codice statico per il lato client (html, js, semplice testo)<br>&lt;%@ taglib: include librerie di tag<br><br><h3>Azioni</h3>Tag che compiono azioni particolari richiamando metodi o oggetti per la servlet sottostante.<br>&lt;jsp:useBean id=\"nomeIstanza\" class=\"NomeClasse\" scope=\"page\"&gt;<br>&lt;jsp:setProperty ... <br>&lt;jsp:getProperty ...<br>&lt;jsp:param ...<br>&lt;jsp:include ... permette di includere contenuto dinamico proseguendo l'esecuzione nel jsp chiamante<br>&lt;jsp:forward ... chiamare una servlet interrompendo il flusso in quella chiamante<br><br><br>N.B.<br>JavaBean sono oggetti di tipo POJO (Plain Old Java Object), ovvero oggetti serializzabili (rappresentabili tramite stringa e deve avere un costruttore vuoto).<br>Gli EJB (Enterprise Java Bean) sono diversi dai JavaBean: oggetti Java specializzati (SJO).<br><br><h3>Oggetti impliciti</h3>Sono variabili con nomi riservati per gli oggetti: request, response, session, application, ecc.<br><br><h2>JSTL</h2><br>Libreria di tag lato server che incapsula codice Java:<br>core, fn, xml, sql<br><br><h2>EL (Expression Language)</h2><br>Specificato così: <mark>${}</mark> linguaggio minimale per interagire con gli attributi dei tag JSTL<br><br>"],[["direttiva","page","superflua"],"Questa riga di codice è una direttiva page:<br><mark>&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;</mark><br><br>Viene posta all'inizio di un nuovo file JSP, ma è superflua perché specifica aspetti predefiniti, quindi si può eliminare.<br>"],[["jsp","chiamate","servlet"],"Una servlet riceve request e response e può:<br>- inoltrare con RequestDispatcher: metodo forward()<br>- avviare una nuova chiamata con response.sendRedirect(\"nome_file.jsp\")<br>- includere con RequestDispatcher una servlet mantenendosi sulla servlet chiamante con jsp:include<br>"],[["import","statico"],"Anche se un metodo non è statico, soprattutto nei test, è comodo importarlo come metodo statico. Esempio:<br><br><mark>import&nbsp;static&nbsp;org.junit.Assert.assertEquals;</mark><br><br><mark>@Test<br>public&nbsp;void&nbsp;esempioTest()<br>{</mark><br>&nbsp;&nbsp;&nbsp; // ...<br><br>&nbsp;&nbsp;&nbsp; // posso usare il metodo direttamente<br><mark>&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(\"2&nbsp;+&nbsp;3&nbsp;should&nbsp;have&nbsp;returned&nbsp;5\",&nbsp;5,&nbsp;result);<br>}</mark><br><br>"],[["junit","test","suite"],"JUnit funziona con una <mark>test&nbsp;suite</mark> (semplicemente è una classe), all'interno avremo dei <mark>test&nbsp;case</mark>, composti da <mark>assertion</mark>."]],"SQL":[[["creare","eliminare","database","namespace"],"<mark>CREATE DATABASE nome_database;</mark><br><br>Se in seguito si devono fare varie operazioni sul database si può usare un namespace:<br><br><mark>USE nome_database;</mark><br><br>Per eliminare:<br><br><mark>DROP DATABASE nome_database;</mark>"],[["funzioni","gruppo","raggruppamento","max","min","avg","sum","count"],"<h1>Funzioni di gruppo / di raggruppamento</h1><br><mark>MAX</mark> recupera il valore maggiore in una colonna<br><mark>MIN</mark> idem, ma il valore minore<br><mark>SUM</mark> somma tutti i valori di una colonna<br><mark>AVG</mark> la media dei valori: es. SELECT AVG(cilindrata) FROM veicoli<br><mark>COUNT</mark> conta le righe: SELECT COUNT(*) FROM tabella (inutile specificare una colonna)<br><br>Sintassi:<br><mark>SELECT FUNZIONE_DI_GRUPPO(colonna) FROM tabella;</mark><br>"],[["select","ordine","istruzioni"],"SELECT<br>FROM<br>WHERE<br>GROUP BY<br>HAVING<br>ORDER BY"],[["where","having","in"],"L'operatore IN permette di valutare se un valore è presente in un insieme di valori. Si può usare con where e con having.<br><br><mark>SELECT&nbsp;*&nbsp;FROM&nbsp;veicoli&nbsp;WHERE&nbsp;targa&nbsp;IN&nbsp;('AX123BY','AZ234AS','QQ123WW');</mark><br><br>"],[["select","where","equijoin"],"L'equijoin è una query che restituisce una tabella le cui righe sono generate consultando due tabelle relazionate tramite una chiave comune alle righe da associare. L'uguaglianza delle chiavi si specifica con WHERE.<br><br><mark>SELECT&nbsp;a.id_automobili,&nbsp;targa,&nbsp;nome_modello&nbsp;FROM&nbsp;automobili&nbsp;a,&nbsp;modelli&nbsp;m\n<br>WHERE&nbsp;(a.id_automobili&nbsp;=&nbsp;m.id_automobili)&nbsp;ORDER&nbsp;BY&nbsp;targa;</mark><br><br>"],[["select","from","inner","join","using","natural"],"INNER JOIN ... USING è una query che restituisce una tabella le cui righe sono costituite da tutte le righe di una ed un'altra tabella associate in base ad una chiave comune. Dunque USING è obbligatorio e si tratta di un modo più breve di fare l'equijoin.<br><br>N.B. Questa sintassi è supportata solo da alcuni database, per esempio Oracle.<br><br>Partire da una tabella e poi unirne un'altra o viceversa è equivalente:<br><mark>select&nbsp;*&nbsp;from&nbsp;Veicoli&nbsp;INNER&nbsp;JOIN&nbsp;Modelli&nbsp;USING(id_modello);\n<br>select&nbsp;*&nbsp;from&nbsp;Modelli&nbsp;INNER&nbsp;JOIN&nbsp;Veicoli&nbsp;USING(id_modello);</mark><br><br>Se i nomi dei campi delle chiavi comuni sono uguali è possibile usare:<br><mark>select&nbsp;*&nbsp;from&nbsp;Veicoli&nbsp;NATURAL&nbsp;INNER&nbsp;JOIN&nbsp;Modelli;</mark><br><br>Tutte le query precedenti sono equivalenti a:<br><mark>select&nbsp;*&nbsp;from&nbsp;Veicoli&nbsp;v,&nbsp;Modelli&nbsp;m&nbsp;where&nbsp;v.id_modello=&nbsp;c.id_modello;</mark><br><br>"]],"Angular":[[["preparare","installare","dipendenze"],"<h1>Installare Angular</h1><br>Angular dipende da NodeJS<br>N.B. AngularJS è la vecchia versione, adesso si chiama Angular (<a href=\"https://angular.io\" target=\"_blank\">angular.io</a>).<br><br>- Installare <a href=\"https://nodejs.org/it\" target=\"_blank\">NodeJS</a>, si tratta di un'applicazione che esegue JS (arricchito con qualche potenzialità) fuori dal browser e quindi anche lato server. NodeJS è una dipendenza/componente di Chrome.<br>- Installare <a href=\"https://git-scm.com/downloads\" target=\"_blank\">Git</a> perché è usato per recuperare le dipendenze di volta in volta necessarie.<br>- La presenza di NodeJS mette a disposizione il comando 'npm' che è un gestore di pacchetti.<br>- angular-cli, installarlo con: <mark>npm i -g @angular/cli</mark> (con permessi di root, i sta per install, -g esegue un'installazione globale, altrimenti installa componenti sulla cartella corrente)<br>- Ora è disponibile il comando 'ng' che sarebbe l'abbreviazione di angular.<br>- Per installare una nuova applicazione: <mark>ng new nome_progetto</mark><br>- Si lavora principalmente in: nome_progetto/src<br>- Collocarsi su: <mark>cd nome_progetto</mark> ed eseguire: <mark>ng serve</mark> (così avremo un server in locale), il comando comunica a quale porta del localhost viene servito il sito, in via predefinita: <a href=\"http://localhost:4200\" target=\"_blank\">http://localhost:4200</a><br><br>"],[["nuovo","componente"],"Un'app Angular si struttura tramite componenti. Per crearne uno nuovo:<br><mark>ng&nbsp;g&nbsp;component&nbsp;nome_componente</mark> (g sta per generate)<br><br>I componenti sono inseriti in una cartella omonima dentro src/app e sono costituiti da 4 file:<br><mark>nome.component.css</mark> (grafica del componente)<br><mark>nome.component.html</mark> (template specifico e si può usare <mark>{{variabile</mark> o espressione<mark>}}</mark> )<br><mark>nome.component.spec.ts</mark> (file TypeScript dedicato al testing)<br><mark>nome.component.ts</mark> (file TypeScript)"],[["nuovo","servizio"],"Un servizio viene usato per chiedere dati ad Angular. Essi vengono istanziati una sola volta (singleton):<br><mark>ng&nbsp;g&nbsp;service&nbsp;nome_servizio</mark> (g: generate)<br><br>Si creano due file:<br><mark>nome.service.spec.ts</mark> (file TypeScript dedicato ai test)<br><mark>nome.service.ts</mark> (file TypeScript del servizio)<br><br>"],[["expressions","espressioni","{{}}"],"In Angular dentro i file html dei componenti si possono usare le espressioni Angular:<br><mark>{{variabile}}</mark> (stampa nome variabile)<br><mark>{{object|json}}</mark> (converte l'oggetto in formato json e stampa)<br><mark>{{2+3}}</mark> (risolve e scrive 5)<br><mark>{{autori[0].cognome}}</mark> (valori di array semplici e associativi)<br><br>In generale possiamo scrivere espressioni js con dei limiti.<br><br>Negli attributi del template html possiamo avere solo testo o l'attributo dentro parentesi quadre, nel secondo caso il valore dell'attributo viene valutato come un'espressione js:<br><br><mark>attributo=\"4+4\"<br>attributo=\"{{4+4}}\"<br>[attributo]=\"4+4\"</mark><br><br>Spesso le parentesi quadre servono per i dati in input (comportamento più affidabile):<br><mark>[oggetto]=\"item\"</mark> (item non sarà una stringa, ma si cerca la variabile item)<br><br>"]],"HTML":[[["elementi","semantici","generici"],"<mark>&lt;header&gt;</mark><br>Specifica una intestazione del sito o di un contenuto o di una scheda e simili.<br>Non può essere usato dentro header o dentro footer.<br><br><mark>&lt;section&gt;</mark><br>Raggruppa elementi omogenei oppure specifica un contenuto articolato in cui vogliamo inserire un'intestazione, un corpo, informazioni di contatto, ecc. Serve anche per indicare una parte del sito che non rientra in altre categorie semantiche predefinite.<br><br><mark>&lt;main&gt;</mark><br>Deve essere unico. È come un section, ma più specifico ed indica il contenuto principale di un sito (tale contenuto può consistere anche in un elenco di sommari o risultati di una ricerca).<br><br><mark>&lt;article&gt;</mark><br>Specifica un contenuto che da solo (indipendentemente dal contesto offerto dal sito) ha un senso e può essere ripresentato altrove.<br><br>N.B. &lt;section&gt; e &lt;article&gt; possono annidarsi tra loro liberamente. Es.: una sezione di articoli e un articolo con una sezione tecnica.<br><br><mark>&lt;footer&gt;</mark><br>Solitamente contiene meta-informazioni sui contenuti, può essere inserito nel documento o nelle sezioni.<br><br><mark>&lt;nav&gt;</mark><br>Indica i menu, insiemi di link di importanza rilevante per la navigazione del sito.<br><br><mark>&lt;aside&gt;</mark><br>Indica parti secondarie del sito dedicate a contenuti correlati, extra, curiosità, ecc.<br><br><br>"],[["elementi","semantici","specifici"],"<mark>&lt;figure&gt;</mark><br>Serve a descrivere semanticamente un'immagine. Esempio:<br> <br><mark>&lt;figure&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src=\"nome_file.jpg\" alt=\"Descrizione immagine\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;figcaption&gt;Fig. 1 - Titolo, località, fotografo.&lt;/figcaption&gt;<br>&lt;/figure&gt;</mark><br><br><mark>&lt;mark&gt;</mark><br>Evidenzia porzioni di testo o parole chiave attribuendogli una rilevanza semantica.<br><br><mark>&lt;time&gt;</mark><br>Attribuisce un giorno ed un ora ad un evento scritto per umani:<br><br><mark>&lt;time datetime=\"2020-02-14 00:00\"&gt;Giorno di San Valentino&lt;/time&gt;</mark><br><br>N.B.<br>Ci sono altri tag specifici ma spesso sono parzialmente supportati o sperimentali.<br> "],[["comandi","http","principali"],"Ci sono alcuni comandi principali che però, quando giungono al server, questo decide cosa fare con queste informazioni e spesso si usano unicamente GET e POST per comunicare ogni operazione.<br><br><mark>http get</mark> : lettura dati<br>(spedisce dati via URL mediante querystring)<br><br><mark>http post</mark> : inserimento dati<br>(spedisce dati via header http)<br><br>Ci sono anche due comandi previsti dal protocollo Http 2.0, ma non sono implementati dai browser.<br><br><mark>http put</mark> : aggiornamento dati<br><br><mark>http delete</mark> : eliminazione dati<br>"]],"Bootstrap":[[["inserimento","link","css","js"],"HEAD:<br><br><mark>&lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"&gt;</mark><br><br>Raccomandato aggiungere:<br><mark>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;</mark><br><br>SCRIPT (in fondo a BODY):<br><br><mark>&lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;<br>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;<br>&lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;</mark><br><br>"],[["contenitore","container","fisso","fluido"],"Affinché bootstrap lavori correttamente è bene inserire ogni sua classe dentro un contenitore. Questo può essere fisso o fluido:<br><br><mark>&lt;div class=\"container\"&gt;<br>&lt;/div&gt;<br><br>&lt;div class=\"container-fluid\"&gt;<br>&lt;/div&gt;</mark><br><br>I contenitori verranno usati come se fossero una griglia di 12 colonne e si specificherà agli elementi contenuti quante colonne devono occupare.<br>"],[["personalizzare","scss","compilare","npm"],"Bootstrap può essere personalizzato attraverso i file scss, però occorre avere i suoi sorgenti per esempio con:<br><br><mark>npm install bootstrap</mark><br><br>Le modifiche si realizzano tramite override degli stili scss (consultare documentazione). Poi si ricompilano i file di distribuzione con:<br><br><mark>npm run dist</mark><br><br>Per includere bootstrap nel proprio progetto indicare nel punto di ingresso dell'applicazione Web (solitamente index.js o app.js):<br><br><mark>import 'bootstrap';</mark><br><br>"],[["grid","row","col","size","colonne","a","capo"],"Il layout di un sito si struttura tramite la griglia di bootstrap:<br><br><mark>&lt;div class=\"container\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=\"row\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=\"col-md-6\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One of three columns<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=\"col-md-6\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One of three columns<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/div&gt;</mark><br><br>Il numero finale specifica quante colonne deve occupare l'elemento. In via predefinita lo spazio è diviso in parti uguali. Esempi: col-6 (6 colonne su 12), col-2 (2 colonne su 12), ecc.<br><br>Le taglie (size) servono per legare il numero di colonne specificato ad un dispositivo:<br><mark>col</mark> (implicito xs, dispositivo extra small)<br><mark>col-sm</mark> (dispositivo small)<br><mark>col-md</mark> (medium)<br><mark>col-lg</mark> (large)<br><mark>col-xl</mark> (extra large)<br><br>Per mandare a capo delle colonne si può usare l'elemento invisibile:<br><mark>&lt;div class=\"w-100\"&gt;&lt;/div&gt;</mark><br><br>"],[["grid","row","justify-content","allineamento","orizzontale"],"Le colonne di una tabella (se non occupano 12/12) possono essere giustificate:<br><br>a sinistra: \"<mark>row</mark>\" (senza dire altro)<br>al centro: \"<mark>row justify-content-md-center</mark>\"<br>a destra: \"<mark>row justify-content-md-end</mark>\"<br>spazio intorno: \"<mark>row justify-content-around</mark>\"<br>spazio tra elementi: \"<mark>row justify-content-between</mark>\"<br><br>Siccome le direttive accompagnano row, ciascuna riga può ricevere direttive diverse.<br>Inoltre, si possono spostare le colonne tramite offset:<br>spazio vuoto di 2 colonne e poi la colonna desiderata: \"<mark>col&nbsp;offset-md-2</mark>\"<br>Se si superano le 12 colonne, va a capo.<br>Per eliminare l'offset con taglie superiori: \"<mark>col&nbsp;offset-lg-0</mark>\"<br>"],[["grid","margin","padding","positivo","negativo"],"Il padding ed il margin si possono impostare per un contenitore, una riga, una colonna, un qualsiasi elemento di bootstrap.<br><br>padding: <mark>p-4</mark><br>padding orizzontale: <mark>px-2</mark><br>padding verticale: <mark>py-4</mark><br><br>margin: <mark>m-4</mark><br>margin orizzontale: <mark>mx-2</mark><br>margin verticale: <mark>my-0</mark><br>margin orizzontale negativo: <mark>mx-n2</mark><br><br>Le taglie si possono sempre inserire tra m o p e il numero:<br><mark>mx-1 mx-md-4</mark><br><br>"],[["grid","row","align-items","allineamento","verticale"],"Se il contatore è più alto del contenuto (altezza) delle colonne, queste si possono posizionare:<br><br>In alto: \"<mark>row&nbsp;align-items-start</mark>\"<br>Al centro: \"<mark>row&nbsp;align-items-center</mark>\"<br>In basso: \"<mark>row&nbsp;align-items-end</mark>\"<br><br>È possibile specificare il posizionamento verticale per singole colonne:<br><br><mark>&lt;div&nbsp;class=\"container\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=\"row\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=\"col&nbsp;align-self-start\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mi&nbsp;trovo&nbsp;in&nbsp;alto<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=\"col&nbsp;align-self-center\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mi&nbsp;trovo&nbsp;al&nbsp;centro<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=\"col&nbsp;align-self-end\"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mi&nbsp;trovo&nbsp;in&nbsp;basso<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/div&gt;</mark><br><br>"],[["grid","col","order","ordinamento"],"Le colonne si possono ordinare aggiungengo una classe di fianco a col:<br><br>\"<mark>col</mark>\" (dopo first vengono elencati i senza numero)<br>\"<mark>col&nbsp;order-1</mark>\" (dopo first e dopo i senza numero)<br>\"<mark>col&nbsp;order-first</mark>\" (al primo posto e prevale su tutto)<br>\"<mark>col&nbsp;order-last</mark>\" (ultimo posto)<br>\"<mark>col&nbsp;order-3</mark>\" (segue l'ordinamento dei numeri)<br><br>"]],"CSS":[[["transizioni","animate"],"Innumerevoli effetti di transizione si possono realizzare con CSS. Il metodo più semplice consiste nel definire due classi, una con lo stile iniziale, una con lo stile finale. L'elemento che passerà da una classe all'altra deve possedere:<br><mark>transition: all .5s ease 1s;</mark><br><br><mark>all</mark>: tutte le proprietà cercheranno di fare una transizione, ma si può limitare: es. width.<br><mark>.5s</mark>: mezzo secondo, è il tempo di durata della transizione.<br><mark>ease</mark>: sono modalità della transizione per ammorbidire inizio e fine o averla lineare.<br><mark>1s</mark>: è il ritardo facoltativo prima di far partire la transizione."],[["grid","spazi","dimensionamento"],"La direttiva grid viene data ad un box genitore insieme al numero e alla dimensione delle colonne e delle righe:<br><mark>display: grid;<br>grid-template-columns: 1fr 1fr 1fr 1fr;<br>grid-template-rows: 10vh 20vh 20vh 50vh;</mark><br><br>fr è una frazione, nel caso precedente corrisponde al 25%.<br><br>Quasi sempre servirà dare direttive ai figli. Questi cercano di occupare i primi posti liberi in relazione alla loro dimensione. La loro dimensione è definita dicendo da quale colonna iniziano a quale colonna finiscono e da quale riga iniziano a quale riga finiscono. La sintassi breve è questa:<br><mark>grid-column: 1 / 2;<br>grid-row: 2 / 4;</mark><br><br>N.B. Singoli errori nella griglia possono portare a guastarla tutta.<br><br>Le stesse cose si possono fare con la direttiva <mark>grid-template-areas</mark>, ma è più chiaro il metodo qui sopra."],[["float"],"Il concetto di float è problematico, si tratta di un flusso, fuori dal flusso ordinario, ma con la possibilità per questi flussi di scorrere in parallelo.<br><br>Si può avviare un flusso a sinistra o a destra:<br><mark>float: left;<br>float: right;</mark><br><br>Si deve interrompere un flusso avviato con clear:<br><mark>clear: left;<br>clear: right;<br>clear: both;</mark><br><br>N.B. Si possono realizzare testi a colonne con questa tecnica, ma conviene flex.<br>"],[["flex","riga","colonna","spazio","direction","justify","align","allineamento","orizzontale","verticale"],"La direttiva flex viene data ad un box genitore ed anche le prossime direttive sono per il genitore.<br><mark>display: flex;</mark><br><br>Il flusso di elementi è automaticamente orizzontale (riga) e non va a capo.<br>Orizzontale e che va a capo:<br><mark>flex-direction: row;<br>flex-wrap: wrap;</mark><br>Scorciatoia:<br><mark>flex-flow: row wrap;</mark><br><br>Verticale:<br><mark>flex-direction: column;</mark><br><br>Verticale con ordine invertito:<br><mark>flex-direction: column-reverse;</mark><br><br>Gli elementi orizzontalmente possono essere:<br>Centrati: <mark>justify-content: center;</mark><br>Messi a sinistra: <mark>justify-content: left;</mark><br>Messi a destra: <mark>justify-content: right;</mark><br>Giustificati con spazio tra loro: <mark>justify-content: space-between;</mark><br>Giustificati con spazio tra loro e il bordo: <mark>justify-content: space-evenly;</mark><br>Giustificati con spazio attorno loro: <mark>justify-content: space-around;</mark><br><br>Gli elementi verticalmente possono essere:<br>Posti in alto: <mark>align-items: flex-start;</mark><br>Posti al centro: <mark>align-items: center;</mark><br>Posti in basso: <mark>align-items: flex-end;</mark><br>Espansi dall'alto al basso: <mark>align-items: stretch;</mark><br><br>"],[["pseudo","elementi","html"],"Qui l'elenco ed il significato degli pseudo elementi HTML:<br><a href=\"https://www.w3schools.com/css/css_pseudo_elements.asp\" target=\"_blank\">https://www.w3schools.com/css/css_pseudo_elements.asp</a><br><br>::after (aggiunge un elemento dopo)<br>::before  (aggiunge un elemento prima)<br>::first-letter<br>::first-line<br>::selection<br><br>:active<br>:checked<br>:disabled<br>:empty<br>:enabled<br>:first-child<br>:first-of-type<br>:focus<br>:hover<br>:in-range<br>:invalid<br>:lang(language)<br>:last-child<br>:last-of-type<br>:link (non visitato)<br>:not(selector) (tutto tranne selector)<br>:nth-child(n)<br>:nth-last-child(n)<br>:nth-last-of-type(n)<br>:nth-of-type(n)<br>:only-of-type<br>:only-child<br>:optional (senza attributo required)<br>:out-of-range<br>:read-only<br>:read-write<br>:required<br>:root<br>:target<br>:valid (input con valore valido)<br>:visited<br><br>"],[["posizionamento","fisso","relativo","assoluto"],"Il posizionamento fisso è relativo al documento, si posiziona specificando distanze dai bordi:<br><mark>position: fixed;<br>top: 0;<br>right: 0;</mark><br><br>Se vogliamo sovrapporre elementi figli tra loro, servirà un elemento padre con:<br><mark>position: relative;</mark><br>ed entrambi gli elementi figli con:<br><mark>position: absolute;</mark><br><br>N.B. absolute senza un padre relative non funziona.<br>"]],"JQuery":[[["ajax"],"<a href=\"http://api.jquery.com/jquery.ajax\" target=\"_blank\">http://api.jquery.com/jquery.ajax</a><br><br><mark>$.('url_path.php', {<br>&nbsp;&nbsp;&nbsp;&nbsp;data: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chiave: valore<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;success: function(response) {</mark><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* In caso di successo */<br><mark>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;error: function(response) {</mark><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* In caso di errore */<br><mark>&nbsp;&nbsp;&nbsp;&nbsp;}<br>});<br><br>L'URL può essere inserito nell'array associativo del secondo argomento:<br></mark><br><mark>$.(</mark><mark>{url: 'url_path.php',<br>&nbsp;&nbsp;&nbsp;&nbsp;data: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chiave: valore<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;success: function(response) {</mark><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;/* In caso di successo */<br>    <mark>&nbsp;&nbsp;&nbsp;&nbsp;}<br>});</mark><br><br>N.B. <mark>response</mark> viene creato implicitamente<br>"]],"OOP":[[["scaffolding"],"Scaffolding significa prepare tutta la struttura e le configurazioni."]],"GNU-Linux":[[["grep"],"<mark>comando_che_produce_output_testuale&nbsp;|&nbsp;grep&nbsp;'^PATH'</mark><br><mark>grep&nbsp;'regex'&nbsp;nome_file</mark><br><br>'^PATH' : esempio di regex"]],"CleanCode":[[["design","pattern"],"Un <mark>design&nbsp;pattern</mark> è una soluzione standard a problemi ricorrenti.<br>N.B. ci sono anche <mark>anti-pattern</mark> es. \"oggetto dio\" (che fa tutto)<br><br><h2>GRASP&nbsp;(General&nbsp;Responsibility&nbsp;Assignment&nbsp;Software&nbsp;Patterns)</h2>Consiste nell'assegnare le responsabilità all'oggetto più esperto.<br>Lo scopo è ridurre il più possibile l'accoppiamento tra classi.<br>Rendere le classi coese, ovvero con poche o singole responsabilità.<br><br><h2>SOLID</h2>- Principio di singola responsabilità<br>- Aperto alle estensioni e chiuso alle modifiche<br>- Oggetti sostituibili con loro sottotipi<br>- Sono preferibili più interfacce specifiche che una generica<br>- Una classe dovrebbe dipendere da astrazioni, non da classi concrete<br><br><h2>OOP&nbsp;(Object&nbsp;Oriented&nbsp;Programming)</h2>OOP modella il dominio di interesse ed associa responsabilità.<br><br><h2>MVC&nbsp;(Model&nbsp;View&nbsp;Controller)</h2>Software complessi devono essere organizzati in strati (layer).<br>&nbsp;| -- <mark>Presentation</mark> (end-to-end test) [V] [C] (V e C a volte sono accorpati nei framework)<br>&nbsp;| -- <mark>Business&nbsp;logic</mark> / <mark>Domain&nbsp;model</mark> (unit test) [M]<br>\\_/-- <mark>Services</mark> (integration test)<br><br>I comandi vanno dall'alto al basso, così da poter modularizzare bene: V &gt; C &gt; M (la V invia un evento al C, il C aggiorna M e comunica a V che può aggiornarsi, V legge M e si aggiorna).<br><br><h2>Observer</h2>Per semplificare V &gt; C &gt; M, si è pensato che V può dotarsi di un ascoltatore di M, così che piccole notifiche possono passare dal basso verso l'alto.<br>Ci sono due fasi: 1) \"abbonamento all'ascolto\" ed 2) invio di una notifica.<br>Si può creare la classe Observer da cui estendere V e l'interfaccia Observable da far implementare a M. Si crea un forte accoppiamento tra l'Observer e la V. Seguono due alternative.<br><br>Strategy<br><br>Decorator"],[["behaviour-driven","development"],"È molto richiesto l'approccio BDD (Behaviour-Driven Development), la cui finalità è realizzare test quasi espressi con il linguaggio umano.<br><br>'test suite' diventa <mark>describe</mark> (descrive come funziona l'applicazione)<br>'test case' diventa <mark>it</mark> (esso fa.. nome della funzione)<br>'assertion' diventa <mark>expect</mark> (mi aspetto...)<br><br>Un buon modo di commentare un test unitario:<br>// given<br>...<br>// when<br>...<br>// then<br>...<br><br><br>"],[["tdd","test-driven","development"],"<h1>TDD&nbsp;Test-Driven&nbsp;Development</h1><br>È un approccio che mette al centro i test. Prima si scrive il test che fallisce, poi si implementa il codice per far funzionare il test e poi si passa al prossimo test. Lo sviluppo è dunque guidato dai test.<br><br>I test servono in ordine: a fornire documentazione (perché offrono numerosi esempi concreti e cosa ci si aspetta debba accadere), a fare progettazione, a prevenire regressioni (una nuova funzionalità crea errori e si rischia di regredire, posso procedere se tutti i test finora svolti continuano ad essere verdi).<br><br><br><h2>Test&nbsp;unitari</h2><br>Sono test interni, si testa la funzionalità dell'applicazione. Sono ben incapsulati (da cui il nome unitari), quindi facili da scrivere e rapidi.<br><br><h2>Test&nbsp;di&nbsp;integrazione</h2><br>Verificare che l'applicazione java comunica con il database (o altro). Comunica? Trovo i record scritti nel DB? ecc. La difficoltà è che esternamente ci sia uno stato che cambia col tempo, oppure che il servizio sia spento, oppure falliscono se eseguiti 2 volte<br><br><h2>Test&nbsp;end-to-end&nbsp;(E2E)</h2><br>Test \"da punto a punto\" simulano l'interazione dell'utente, sono i più difficili da eseguire. Es.: cosa succede se l'utente clicca su un bottone in un certo momento del suo percorso?"]],"Maven":[[["nuovo","progetto","pom.xml"],"Comando maven: <mark>mvn</mark><br><mark>archetype:generate</mark> (si basa su un \"archetipo\" e genererà un progetto)<br><mark>-DgroupId=it.formarete</mark> (definisce il gruppo a cui il progetto appartiene, è giusto un namespace)<br><mark>-DartifactId=mvc</mark> (definisce l'id del progetto che sarà il nome della cartella)<br><mark>-DarchetypeArtifactId=maven-archetype-quickstart</mark> (un archetipo di inizio, conviene non inserirlo, verranno proposti numerosi progetti, scrivere una parte del nome del progetto desiderato e poi specificare quale si desidera dal filtraggio effettuato - se si specifica, il rischio è che viene installata la versione più vecchia)<br><mark>-DinteractiveMode=false</mark> (meglio evitare)<br><br>Esempio tipico: <mark>mvn&nbsp;archetype:generate&nbsp;-DgroupId=it.nome_gruppo&nbsp;-DartifactId=nome_progetto</mark><br><br>Verrà creato nella cartella un file pom.xml dove ci sono configurazioni che, se modificate, ridefiniscono i parametri del progetto come le dipendenze e le versioni dei componenti.<br><br>N.B.<br>Se maven inizia a scaricare molti pacchetti può essere perché genericamente non li ha trovati, ne ha bisogno, e può cogliere un'occasione qualsiasi (es. lancio di un comando) per scaricarli.<br><br>Ctrl+C interrompe il comando<br>"],[["compilare","eseguire","package"],"<mark>mvn&nbsp;package</mark><br>compilare il pacchetto dentro la cartella target<br><br><mark>java&nbsp;-cp&nbsp;target/nome_progetto.jar&nbsp;it.nome_gruppo.App</mark><br>esegue un jar compilato da maven<br><br><mark>mvn&nbsp;clean</mark><br>cancella la cartella target (situazione pulita per ricompilare)<br><br>N.B.<br>Spesso viene detto \"BUILD SUCCESS\", ma non sempre a seguito di una compilazione.<br>"]]}
}